<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../../partials/admin/head')  %> 

    <title>Manage Blog Post - UniVerseHub Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f2f2f3;
        }
        .form-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,.1);
            padding: 2rem;
            margin-top: 2rem;
            margin-bottom: 2rem;
        }
        #editor {
            height: 300px;
        }
        .form-check-input:checked {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
  
    </style>
</head>
<body>
    <%- include('../../partials/admin/nav')  %> 

    <div class="container-fluid">
        <div class="row">
            <%- include('../../partials/admin/sidebar') %>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="row justify-content-center">
                    <div class="col-lg-10">
                        <div class="form-container">
                            <div class="badge <%= blog.status === 'draft' ? 'bg-info' : 'bg-success' %>"><%= blog.status %></div>
                            <h1 class="mb-4">Manage Blog Post</h1>
                            <form id="blogForm" class="needs-validation" novalidate>
                                <div class="mb-3">
                                    <label for="blogTitle" class="form-label">Blog Title</label>
                                    <input type="text" class="form-control" id="blogTitle" value="<%= blog.title %>" name="title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="blogSlug" class="form-label">Slug</label>
                                    <input type="text" class="form-control" id="blogSlug" value="<%= blog.slug %>" name="slug" required>
                                    <div id="slugCheckFeedback" class="form-text">Changing your slug may affect how others find the blog on the platform.</div>
                                    <div id="slugInvalidFeedback" class="invalid-feedback">
                                        slug can't be empty!
                                    </div>
                                    <div id="slugValidFeedback" class="valid-feedback">
                                        Available.
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="blogCategory" class="form-label">Category</label>
                                    <select class="form-select" id="blogCategory" name="category" required>
                                        <option value="">Select a category</option>
                                        <% if(categories.length > 0) { %>
                                            <% categories.map(category => { %>
                                                <option value="<%= category.name %>" 
                                                        <%= (category._id.toString() === blog.category._id.toString()) ? "selected" : ""%> >
                                                    <%= category.name %>
                                                </option>
                                            <% }) %>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="featuredImage" class="form-label">Featured Image</label>
                                    <input type="file" class="form-control" id="featuredImage" name="image" accept="image/*">
                                </div>
                                <div class="mb-3">
                                    <label for="featuredImage" class="form-label">Snippet</label>
                                    <textarea type="text" class="form-control" name="snippet" value="<%= blog.snippet %>" id="blogSnippet" rows="2"><%= blog.snippet %></textarea>
                                </div>
                                <div class="mb-3">
                                    <input type="hidden" id="blog-content" name="blogBodyHolder" value="<%= blog.body %>" hidden aria-hidden="true"/>
                                    <label for="editor" class="form-label">Blog Content</label>
                                    <div id="editor"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="blogTags" class="form-label">Tags (comma-separated)</label>
                                    <input type="text" class="form-control" id="blogTags" value="<%= blog.tags.join() %>" name="tags" placeholder="e.g., online learning, technology, education">
                                </div>
                                <div class="mb-3 form-check form-switch">
                                    <input class="form-check-input" type="checkbox"
                                           <%= blog.featured ? "checked": "" %>
                                           name="featured"  id="featuredToggle">
                                    <label class="form-check-label" for="featuredToggle">Featured Post</label>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="button" class="btn btn-primary me-2" id="publish" <%= blog.status === "draft" ? "" : "disabled" %>>Publish</button>
                                        <button type="submit" class="btn btn-outline-secondary" id="saveDraft">Save as Draft</button>
                                        <a role="link" class="btn btn-outline-secondary" target="_blank" href="/blog/<%= blog.slug %>"><i class="bi bi-eye"></i> Preview</a>
                                    </div>
                                        <button type="button" class="btn btn-danger" id="deleteBlog">Delete Post</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="toast align-items-center text-bg-danger border-0" 
                     role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="10000"
                     style="position: fixed; top: 7rem; right: 2rem;">
                    <div class="d-flex">
                      <div class="toast-body">
                        Hello, world! This is a toast message.
                      </div>
                      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script>
    <script>
        const toolbarOptions = [
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            ['bold', 'italic', 'underline', 'strike'],
            ['blockquote', 'code-block'],
            ['link', 'image', 'video', 'formula'],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            [{ 'direction': 'rtl' }],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'align': [] }],
            ['clean']
        ];

        const quill = new Quill('#editor', {
            theme: 'snow',
            modules: {
                toolbar: toolbarOptions,
                history: {
                    delay: 1000,
                    maxStack: 100,
                    userOnly: false
                },
                clipboard: {
                    matchVisual: false
                },
                syntax: false
            }
        });

        const slug = "<%= blog.slug %>";
        const blogForm = document.getElementById('blogForm');
        const toast = document.querySelector('.toast');
        const toastBody = document.querySelector('.toast-body');
        const blogBody = blogForm.blogBodyHolder?.value || "";
        quill.root.innerHTML = blogBody;



        blogForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            let allImagesUploaded = true;
            const formData = new FormData();
            let content = quill.root.innerHTML;

            function uploadImage(base64Image) {
                const formData = new FormData();
                return fetch(base64Image)
                    .then(res => res.blob())
                    .then(blob => {
                        formData.append('image', blob, 'image.png');
                        return fetch('/admin/upload-image', {
                            method: 'POST',
                            body: formData
                        });
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (!data.fileInfo) throw data.errors;
                        return data.fileInfo.hash;
                    })
                    .catch(err => {
                        allImagesUploaded = false;
                        displayError(err);
                    });
            }

            const base64ImageRegex = /<img src="data:image\/[^;]+;base64[^"]+"[^>]*>/g;
            const base64Images = content.match(base64ImageRegex) || [];

            for (let base64ImageTag of base64Images) {
                const base64Image = base64ImageTag.match(/src="([^"]+)"/)[1];
                const imagehash = await uploadImage(base64Image);
                const imageUrl = `/image/${imagehash}`; 
                content = content.replace(base64Image, imageUrl);
            }

            if(allImagesUploaded) {
                formData.append('title', blogForm.title.value);
                formData.append('slug', blogForm.slug.value);
                formData.append('category', blogForm.category.value);
                formData.append('featured', blogForm.featured.checked);
                formData.append('content', content);
                formData.append('snippet', blogForm.snippet.value);
                formData.append('tags', blogForm.tags.value);
                formData.append('image', blogForm.image.files[0]);

                fetch(`/admin/blog/${slug}`, {
                    method: 'PUT',
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    if(data.errors) {
                        displayError(data.errors);
                    } else if(data.draftedBlog) {
                        const msg = `Saved as draft. Preview at <a class="link-body-emphasis" href="/blog/${data.draftedBlog.slug}">${data.draftedBlog.title}</a>`;
                        displaySucess(msg);
                        window.location = `/admin/blog/${data.draftedBlog.slug}`;
                    }
                })
                .catch(err => console.error(err));
            }
        });

        function displayError(errors) {
            let msg = null;
            Object.entries(errors).map(([_, value]) => {
                if(value) msg = value;
            });
            if(!msg) msg = "Unexpected Error occurred.";
            toastBody.innerHTML = '<i class="bi bi-exclamation-triangle"></i> '+ msg;
            toast.classList.replace('hide', 'show');
            toast.classList.add('text-bg-danger');
            toast.classList.remove('text-bg-success');
        }

        function displaySucess(msg) {
            toastBody.innerHTML = '<i class="bi bi-check-circle-fill"></i> '+ msg;
            toast.classList.replace('hide', 'show');
            toast.classList.add('text-bg-success');
            toast.classList.remove('text-bg-danger');
        }

        document.getElementById('publish').addEventListener('click', function() {
            fetch(`/admin/blog/${slug}/publish`)
            .then(res => res.json())
            .then(data => {
                if(data.errors) {
                    displayError(data.errors);
                } else {
                    const msg = `Published. Preview at <a class="link-body-emphasis" href="/blog/${data.savedBlog.slug}">${data.savedBlog.title}</a>`;
                    displaySucess(msg);
                    location.reload();
                }
            });
        });

        document.getElementById('deleteBlog').addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this blog?')) {
                fetch(`/blog/${slug}`, { method: 'DELETE'})
                .then(res => res.json())
                .then(data => {
                    if(data.redirect) {
                        window.location = data.redirect;
                        alert('Blog deleted successfully!');
                    }
                });
            }
        });
    </script>
    <script>
        (() => {
            'use strict'
            const forms = document.querySelectorAll('.needs-validation')
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()
    </script>
</body>
</html>
