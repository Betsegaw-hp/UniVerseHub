<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../../partials/admin/head')  %> 

    <title>Manage Blog Post - UniVerseHub Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f2f2f3;
        }
        .form-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,.1);
            padding: 2rem;
            margin-top: 2rem;
            margin-bottom: 2rem;
        }
        #editor {
            height: 300px;
        }
        .form-check-input:checked {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
    </style>
</head>
<body>
    <%- include('../../partials/admin/nav')  %> 

    <div class="container-fluid">
        <div class="row">
            <%- include('../../partials/admin/sidebar') %>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="row justify-content-center">
                    <div class="col-lg-10">
                        <div class="form-container">
                            <h1 class="mb-4">New Blog Post</h1>
                            <form id="blogForm" class="needs-validation" novalidate>
                                <div class="mb-3">
                                    <label for="blogTitle" class="form-label">Blog Title</label>
                                    <input type="text" class="form-control" id="blogTitle" name="title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="blogSlug" class="form-label">Slug</label>
                                    <input type="text" class="form-control" id="blogSlug" name="slug" required>
                                    <div id="slugCheckFeedback" class="form-text">Changing your slug may affect how others find the blog on the platform.</div>
                                    <div id="slugInvalidFeedback" class="invalid-feedback">
                                        slug can't be empty!
                                    </div>
                                    <div id="slugValidFeedback" class="valid-feedback">
                                        Available.
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="blogCategory" class="form-label">Category</label>
                                    <select class="form-select" id="blogCategory" name="category" required>
                                        <option value="">Select a category</option>
                                        <% if(categories.length > 0) { %>
                                            <% categories.map(category => { %>
                                                <option value="<%= category.name %>"><%= category.name %></option>
                                            <% }) %>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="featuredImage" class="form-label">Featured Image</label>
                                    <input type="file" class="form-control" id="featuredImage" name="image" accept="image/*">
                                </div>
                                <div class="mb-3">
                                    <label for="featuredImage" class="form-label">Snippet</label>
                                    <textarea type="text" class="form-control" name="snippet" id="blogSnippet" rows="2"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="editor" class="form-label">Blog Content</label>
                                    <div id="editor"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="blogTags" class="form-label">Tags (comma-separated)</label>
                                    <input type="text" class="form-control" id="blogTags" name="tags" placeholder="e.g., online learning, technology, education">
                                </div>
                                <div class="mb-3 form-check form-switch">
                                    <input class="form-check-input" type="checkbox" name="featured" id="featuredToggle">
                                    <label class="form-check-label" for="featuredToggle">Featured Post</label>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <!-- <button type="submit" class="btn btn-primary me-2">Publish</button> -->
                                        <button type="submit" class="btn btn-outline-secondary" id="saveDraft">Save as Draft</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="toast align-items-center text-bg-danger border-0" 
                     role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="10000"
                     style="position: fixed; top: 7rem; right: 2rem;">
                    <div class="d-flex">
                      <div class="toast-body">
                        Hello, world! This is a toast message.
                      </div>
                      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </main>
        </div>
    </div>

    
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script>
        const toolbarOptions = [
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['blockquote', 'code-block'],
            ['link', 'image', 'video', 'formula'],

            [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
            [{ 'direction': 'rtl' }],                         // text direction

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'align': [] }],

            ['clean']                                         // remove formatting button
        ];

        const quill = new Quill('#editor', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });

        const blogForm = document.getElementById('blogForm');
        const toast = document.querySelector('.toast');
        const toastBody = document.querySelector('.toast-body');

        blogForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            let allImagesUploaded = true;
            const formData = new FormData();
            // Extract content from Quill
            let content = quill.root.innerHTML;

            // Function to upload the image and return the URL
            async function uploadImage(base64Image) {
                const formData = new FormData();
                const blob = await fetch(base64Image).then(res => res.blob());
                formData.append('image', blob, 'image.png');


                const response = await fetch('/admin/upload-image', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if(!response.ok) {
                    allImagesUploaded = false;
                    displayError(data.errors);
                }

                return data.imageUrl;
            }


            // Regex to match base64 images in the content
            const base64ImageRegex = /<img src="data:image\/[^;]+;base64[^"]+"[^>]*>/g;

            // Find all base64 images in the content
            const base64Images = content.match(base64ImageRegex) || [];

            for (let base64ImageTag of base64Images) {
                const base64Image = base64ImageTag.match(/src="([^"]+)"/)[1];

                // Upload the image and get the URL
                const imageUrl = await uploadImage(base64Image);

                // Replace the base64 image with the image URL in the content
                content = content.replace(base64Image, imageUrl);
            }

            if(allImagesUploaded) {
                formData.append('title', blogForm.title.value);
                formData.append('slug', blogForm.slug.value);
                formData.append('category', blogForm.category.value);
                formData.append('featured', blogForm.featured.checked);
                formData.append('content', content);
                formData.append('snippet', blogForm.snippet.value);
                formData.append('tags', blogForm.tags.value);
                formData.append('image', blogForm.image.files[0]);  // Correctly handle the image file
    
                fetch('/admin/blog/create', {
                    method: 'POST',
                    body: formData
                })
                .then(res => res.json())
                .then(data => {
                    if(data.errors) {
                        console.log(data.errors)
                        let msg = null;

                        displayError(data.errors);
    
                     } else if(data.savedBlog) {
                        toastBody.innerHTML = `Successfully saved.`;
                        toast.classList.toggle('hide', false);
                        toast.classList.toggle('show', true);
    
                        //styling
                        toast.classList.toggle('text-bg-danger', false);
                        toast.classList.toggle('text-bg-success', true);
                        window.location = `/admin/blog/${data.savedBlog.slug}`;
                    }
                })
                .catch(err => console.error(err));
            }


        });

        function displayError(errors) {
            Object.entries(errors).map(entry => {
                let key = entry[0];
                let value = entry[1];

                if(value != '') msg = value;
            })
            
            if(!msg) msg = "Unexpected Error occured. ";
            toastBody.textContent = msg;
            toast.classList.toggle('hide', false);
            toast.classList.toggle('show', true);

            //styling
            toast.classList.toggle('text-bg-success', false);
            toast.classList.toggle('text-bg-danger', true);
        }
        // Function to generate slug from title
        function generateSlug(title) {
            return title.toLowerCase().replace(/[^\w ]+/g, '').replace(/ +/g, '-');
        }

        // Auto-generate slug when title changes
        document.getElementById('blogTitle').addEventListener('input', function() {
            document.getElementById('blogSlug').value = generateSlug(this.value);
        });

        // check slug availability
        const slugEle = document.getElementById('blogSlug');
        let debounceTimer;
        [document.getElementById('blogTitle'), document.getElementById('blogSlug')].forEach(ele => {

            ele.addEventListener('input', function(e) {

            const slug = slugEle.value.trim();

            slugInvalidFeedback.textContent = "";
            slugValidFeedback.textContent = "";

            // Clear any previous debounce timer
            clearTimeout(debounceTimer);


            if (slug.length > 0) {
                slugCheckFeedback.style.display = "block";
                slugCheckFeedback.textContent = "Checking availability...";

                debounceTimer = setTimeout(() => {
                    // Make the AJAX request after the user stops typing
                    fetch(`/blog/check-slug?slug=${slug}`)
                        .then(response => response.json())
                        .then(data => {

                            slugCheckFeedback.style.display = "none";

                            if (data.available) {
                                slugEle.classList.toggle("is-invalid", false); // Removes the class if it exists
                                slugEle.classList.toggle("is-valid", true); // adds the class if it doesn't exists
                                slugValidFeedback.textContent = "Available!";
                            } else {
                                slugEle.classList.toggle("is-valid", false);  
                                slugEle.classList.toggle("is-invalid", true);
                                slugInvalidFeedback.textContent = "Unavailable. try different!";
                            }
                        })
                        .catch(error => {
                            slugCheckFeedback.style.display = "none";
                            console.error('Error checking slug:', error);
                        });
                }, 1000);
            } else {
                slugCheckFeedback.style.display = "none";
            }
            });
        });
    </script>

    <script>
        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
                }, false)
            })
        })()
    </script>
</body>
</html>