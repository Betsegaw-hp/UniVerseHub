<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head')  %> 
    <style>
        .profile-header {
            padding: 2rem 0;
            margin-bottom: 2rem;
        }
        .avatar-preview {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-white">
    <%- include('../partials/nav')  %>

    <div id="avatarContainer" class="profile-header bg-light-subtle">
        <div class="container text-center">
            <a href="#avatar"><img src="<%= user.avatarUrl %>" alt="Current Profile Picture" class="avatar-preview shadow-sm border border-5 border-dark mb-3" id="avatarPreview"></a>
            <h1 class="display-4">Edit Your Profile</h1>
        </div>
    </div>

    <div class="container mb-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <ul class="nav nav-tabs mb-4" id="myTab" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="true">
                                    <i class="bi bi-person-circle"></i> Profile
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="security-tab" data-bs-toggle="tab" data-bs-target="#security" type="button" role="tab" aria-controls="security" aria-selected="false">
                                    <i class="bi bi-shield-lock"></i> Security
                                </button>
                            </li>
                        </ul>
                        <div class="tab-content" id="myTabContent">
                            <div id="form_alert" class="alert alert-danger gap-2 alert-dismissible show fade" role="alert">
                                <i class="bi bi-x-circle-fill"></i>
                                <small id="alertMsg"></small>
                            </div>
                            <div class="tab-pane fade show active" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                                <form id="updateProfileForm" class="needs-validation" novalidate>
                                    <div class="row row-cols-1 row-cols-md-1">
                                        <div class="col mb-3">
                                            <label for="name" class="form-label">Name</label>
                                            <input type="text" class="form-control" id="name" value="<%= user.name %>" name="name" required>
                                            <div id="nameInvalidFeedback" class="invalid-feedback">
                                                Name can't be empty!
                                            </div>
                                        </div>
                                        <div class="col mb-3">
                                            <label for="username" class="form-label">
                                                Username <i class="bi bi-info-circle"  data-bs-toggle="tooltip" data-bs-title="your username will be unavailable except for you."></i>
                                            </label>
                                            <input type="text" class="form-control" id="username" value="<%= user.username %>" name="username" required>
                                            <div id="UsernameCheckFeedback" class="form-text">Changing your username may affect how others find you on the platform.</div>
                                            <div id="UsernameInvalidFeedback" class="invalid-feedback">
                                                username can't be empty!
                                            </div>
                                            <div id="UsernameValidFeedback" class="valid-feedback">
                                                Available.
                                            </div>
                                        </div>
                                        <div class="col mb-3">
                                            <label for="bio" class="form-label">Bio</label>
                                            <textarea class="form-control" id="bio" name="bio" rows="3"><%= user.bio %></textarea>
                                        </div>
                                        <div class="col-lg-4 mb-3">
                                            <label for="address" class="form-label">Address</label>
                                            <input type="text" class="form-control" id="address" value="<%= user.address %>" name="address">
                                        </div>
                                        <div class="col-lg-4 mb-3">
                                            <label for="occupation" class="form-label">Occupation</label>
                                            <input type="text" class="form-control" id="occupation" value="<%= user.occupation %>" name="occupation">
                                        </div>
                                        <div class="col-lg-4 mb-3">
                                            <label for="avatarUrl" class="form-label">
                                                Avatar URL <i class="bi bi-info-circle"  data-bs-toggle="tooltip" data-bs-title="check your avatar above for live preview."></i>
                                            </label>
                                            <input type="url" class="form-control" id="avatarUrl" value="<%= user.avatarUrl %>" name="avatarUrl">
                                            <div class="invalid-feedback">
                                                Make sure it is a url link
                                            </div>
                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Update Profile</button>
                                </form>
                            </div>
                            <div class="tab-pane fade" id="security" role="tabpanel" aria-labelledby="security-tab">
                                <form id="passwordChangeForm" class="needs-validation" novalidate>
                                    <div class="mb-3">
                                        <label for="currentPassword" class="form-label">Current Password</label>
                                        <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                                        <div id="currPassInvalidFeedback" class="invalid-feedback">
                                            Must not be empty!
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="newPassword" class="form-label">New Password</label>
                                        <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
                                        <input type="password" class="form-control" id="confirmNewPassword" name="confirmNewPassword" required>
                                        <div id="confPassInvalidFeedback" class="invalid-feedback">
                                            Must not be empty!
                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Change Password</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer')  %>

    <script>
        const updateProfileForm = document.getElementById("updateProfileForm");
        const usernameInvalidFeedback = document.getElementById("UsernameInvalidFeedback");
        const usernameValidFeedback = document.getElementById("UsernameValidFeedback");
        const UsernameCheckFeedback = document.getElementById('UsernameCheckFeedback');

        const passwordChangeForm = document.getElementById("passwordChangeForm");
        const currPassInvalidFeedback = document.getElementById("currPassInvalidFeedback");
        const confPassInvalidFeedback = document.getElementById("confPassInvalidFeedback");

        const form_alert = document.querySelector("#form_alert");
        const alertMsg = document.getElementById("alertMsg");

        form_alert.style.display = "none";
        // check usernaem availability
        let debounceTimer;

        updateProfileForm.username.addEventListener("input", (e) => {

            const username = updateProfileForm.username.value.trim();

            usernameInvalidFeedback.textContent = "";
            usernameValidFeedback.textContent = "";

            // Clear any previous debounce timer
            clearTimeout(debounceTimer);


            if (username.length > 0) {
                UsernameCheckFeedback.style.display = "block";
                UsernameCheckFeedback.textContent = "Checking availability...";

                debounceTimer = setTimeout(() => {
                    // Make the AJAX request after the user stops typing
                    fetch(`/auth/check-username?username=${username}`)
                        .then(response => response.json())
                        .then(data => {

                            UsernameCheckFeedback.style.display = "none";

                            if (data.available) {
                                updateProfileForm.username.classList.toggle("is-invalid", false); // Removes the class if it exists
                                updateProfileForm.username.classList.toggle("is-valid", true); // adds the class if it doesn't exists
                                usernameValidFeedback.textContent = "Available!";
                            } else {
                                updateProfileForm.username.classList.toggle("is-valid", false);  
                                updateProfileForm.username.classList.toggle("is-invalid", true);
                                usernameInvalidFeedback.textContent = "Unavailable. try again!";
                            }
                        })
                        .catch(error => {
                            UsernameCheckFeedback.style.display = "none";
                            console.error('Error checking username:', error);
                        });
                }, 1000);
            } else {
                UsernameCheckFeedback.style.display = "none";
            }
        });

        updateProfileForm.addEventListener("submit", (e) => {
            e.preventDefault();

            const currentValues = {
                name: updateProfileForm.name.value.trim(),
                username: updateProfileForm.username.value.trim(),
                bio: updateProfileForm.bio.value.trim(),
                address: updateProfileForm.address.value.trim(),
                occupation: updateProfileForm.occupation.value.trim(),
                avatarUrl: updateProfileForm.avatarUrl.value.trim()
            };

            if (currentValues.name === '' || currentValues.username === '' ) {
                console.log("not good");
            } else {
                fetch("/profile/update", {
                    method: "PUT",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(currentValues)
                })
                .then(res => res.json())
                .then(data => {
                    form_alert.style.display = "block";
                    if(data.user) {
                        form_alert.classList.toggle("alert-danger", false);
                        form_alert.classList.toggle("alert-success", true);
                        console.log(data.user)
                        alertMsg.innerHTML = `Profile updated successfully! ~ <a href="/profile/${data.user.username}">check profile</a>`;
                    }
                    if (data.errors) {
                        form_alert.classList.toggle("alert-success", false);
                        form_alert.classList.toggle("alert-danger", true);
                        let errorContents = "";
                        for(let err of Object.keys(data.errors)) {
                            console.log(data.errors[err]);
                            if (data.errors[err] !== "")
                                errorContents += `${data.errors[err]} <br>`;
                        }
                        alertMsg.innerHTML = errorContents;
                        console.log(data.errors.bio);
                    }
                    if(data.error) {
                        alertMsg.textContent = data.error;
                    }
                })
                .catch(error => {
                    console.error(error)
                });
            }
        })

        currPassInvalidFeedback.textContent = "Must not be empty!";
        confPassInvalidFeedback.textContent = "Must not be empty!";

        passwordChangeForm.addEventListener("submit", (e) => {
            e.preventDefault();

            const newPassword = passwordChangeForm.newPassword.value;
            const confirmNewPassword = passwordChangeForm.confirmNewPassword.value;
            const currentPassword = passwordChangeForm.currentPassword.value;

            if( newPassword !== confirmNewPassword ) {
                passwordChangeForm.confirmNewPassword.classList.toggle("is-valid", false);
                passwordChangeForm.confirmNewPassword.classList.toggle("is-invalid", true);
                confPassInvalidFeedback.textContent = "Do not match!";
            } else {
                passwordChangeForm.confirmNewPassword.classList.toggle("is-invalid", false);
                passwordChangeForm.confirmNewPassword.classList.toggle("is-valid", true);
            }

            fetch("/profile/change-password", {
                    method: "PUT",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        currentPassword,
                        newPassword,
                        confirmNewPassword
                    })
                })
                .then(res => res.json())
                .then(data => {
                    form_alert.style.display = "block";
                    if(data.redirect) {
                        form_alert.classList.toggle("alert-danger", false);
                        form_alert.classList.toggle("alert-success", true);
                        alertMsg.innerHTML = `Password changed successfully!`;

                        setTimeout(() => window.location.href = data.redirect , 2000);
                        
                    }
                    if (data.errors) {
                        form_alert.classList.toggle("alert-success", false);
                        form_alert.classList.toggle("alert-danger", true);
                        alertMsg.innerHTML = data.errors.password;
                        console.log(data.errors)
                    }
                    if(data.error) {
                        alertMsg.textContent = data.error;
                    }
                })
                .catch(error => {
                    console.error(error)
                });

        });
        form_alert.addEventListener("click", (e) => {
            form_alert.style.display = "none";
        });
    </script>

    <script>
        document.getElementById('avatarUrl').addEventListener('input', function() {
            const preview = document.getElementById('avatarPreview');
            preview.src = this.value || 'https://via.placeholder.com/150';
            document.getElementById('avatarContainer').scrollIntoView({ behavior: 'smooth' });
            window.location.hash = '#avatar';
        });
    </script>

    <script>
        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
                }, false)
            })
        })()

        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    </script>
</body>
</html>